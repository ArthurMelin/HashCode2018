#!/usr/bin/python3
import os
import sys
import operator


class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __sub__(self, other):
        return abs(self.x - other.x) + abs(self.y - other.y)

    def __str__(self):
        return 'Point(%d, %d)' % (self.x, self.y)

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y


class Car:
    def __init__(self):
        self.pos = Point(0, 0)
        self.rides = []
        self.moving = False

    def tick(self):
        self.moving -= 1

    def moving(self):
        if self.moving >= 0:
            return 1
        return 0

    def move(self, pos):
        self.moving = pos - self.pos
        self.pos = pos

    def fulfill(self, ride):
        if (self.pos != ride.origin):
            raise Exception('Car not at origin point of ride')
        ride.fulfilled = True
        self.rides.append(ride.id)
        self.move(ride.destination)


class RideRequest:
    def __init__(self, id, origin, destination, start, finish):
        self.id = id
        self.origin = origin
        self.destination = destination
        self.start = start
        self.finish = finish
        self.fulfilled = False
        self.distance = destination.__sub__(origin)


def main(args):
    file = open(args[1], "a+")
    map_rows, map_cols, cars, rides, bonus, steps = [int(param) for param in file.readline().split(' ')]

    cars = [Car() for i in range(cars)]

    rides_requests = []
    for i, line in enumerate(file):
        a_x, a_y, b_x, b_y, start, finish = [int(param) for param in line.split(' ')]
        rides_requests.append(RideRequest(i, Point(a_x, a_y), Point(b_x, b_y), start, finish))

    # CODE

    output_file = open(args[2])
    rides_requests.sort(key=lambda RideRequest: RideRequest.distance)
    rides_requests.sort(key=lambda RideRequest: RideRequest.start)
    for i in range(len(rides_requests)):
        while i <= len(cars) and i <= len(rides_requests):
            cars[i].rides.append(i)
            i += 1
    for car in cars:
        print(len(car.rides), ' '.join([str(ride) for ride in car.rides]))
    return 0


if __name__ == '__main__':
    exit(main(sys.argv))
